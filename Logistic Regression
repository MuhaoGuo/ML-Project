from sklearn.linear_model import LogisticRegressionCV
import pandas as pd

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")
y_train = train.loc[:,'ConvertedComp']
x_train = train.drop(['MainBranch','ConvertedComp'],axis=1)

y_test = test.loc[:,'ConvertedComp']
x_test = test.drop(['MainBranch','ConvertedComp'],axis=1)

def Logistic_Regression_Algorithm_l2penalty(Train_X,Train_Y,Test_X,Test_Y):

    # validation
    val_list = [10**-5, 10**-4, 10**-3, 10**-2, 10**-1, 1, 10, 100, 10**3, 10**4, 10**5]

    clf = LogisticRegressionCV (Cs=val_list, cv=10, penalty="l2", multi_class="multinomial", max_iter=10000, solver="lbfgs")
    clf.fit(Train_X, Train_Y)
    score_test = clf.score(Test_X,Test_Y)

    return score_test

print ("Logistic Regression Algorithm with l2 penalty: the predict score is "+str(Logistic_Regression_Algorithm_l2penalty(x_train, y_train, x_test, y_test)))

def Logistic_Regression_Algorithm_l1penalty(Train_X,Train_Y,Test_X,Test_Y):

    # validation
    val_list = [10**-5, 10**-4, 10**-3, 10**-2, 10**-1, 1, 10, 100, 10**3, 10**4, 10**5]
    # solver="liblinear" is used for l1 penalty
    clf = LogisticRegressionCV (Cs=val_list, cv=10, penalty="l1", multi_class="ovr", max_iter=10000, solver="liblinear")
    clf.fit(Train_X, Train_Y)
    score_test = clf.score(Test_X,Test_Y)

    return score_test

print ("Logistic Regression Algorithm with l1 penalty: the predict score is "+str(Logistic_Regression_Algorithm_l1penalty(x_train, y_train, x_test, y_test)))
print ("\n\n")
